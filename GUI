# GUI

import flet as ft
import yfinance as yf
import pandas as pd
import matplotlib
matplotlib.use("Agg")
import matplotlib.pyplot as plt
from matplotlib.dates import DateFormatter, AutoDateLocator
import matplotlib.ticker as mticker
from io import BytesIO
import base64
from datetime import date, timedelta, datetime


def df_to_base64_plot(df: pd.DataFrame, pair: str) -> str:
    # generate a PNG plot of the close price and return it as a base64 string
    close_col = next((c for c in df.columns if "close" in c.lower()), df.columns[-1])
    fig, ax = plt.subplots(figsize=(8, 4))
    ax.plot(df.index, df[close_col], marker="o", markersize=4, linewidth=1)
    ax.set_title(f"{pair}", pad=10)
    ax.set_xlabel("Date")
    ax.set_ylabel("Price (USD)")
    ax.xaxis.set_major_locator(AutoDateLocator(minticks=12, maxticks=20))
    ax.xaxis.set_major_formatter(DateFormatter("%m-%d"))
    ax.yaxis.set_major_locator(mticker.MaxNLocator(nbins=6))
    fig.autofmt_xdate(rotation=0, ha="center")
    fig.tight_layout()
    buf = BytesIO()
    fig.savefig(buf, format="png", dpi=100)
    plt.close(fig)
    buf.seek(0)
    return base64.b64encode(buf.read()).decode()


def fetch_fx(pair: str, start: str, end: str) -> pd.DataFrame:
    # download OHLCV data from Yahoo Finance
    df = yf.download(pair, start=start, end=end, progress=False, auto_adjust=False)
    if df.empty:
        raise ValueError(f"No data found for {pair} in {start}â€“{end}")
    # some tickers return a MultiIndex column; drop the top level if so
    if isinstance(df.columns, pd.MultiIndex):
        if pair in df.columns.levels[0]:
            df = df[pair]
        else:
            df.columns = df.columns.droplevel(0)
    return df


def main(page: ft.Page):
    page.title = "FX GUI"
    page.window_width, page.window_height = 1000, 700

    # Dropdown + date inputs + Fetch button
    page.pair_dd    = ft.Dropdown(
        label="Currency Pair", width=200,
        value="EURUSD=X",
        options=[ft.dropdown.Option(p) for p in ["EURUSD=X","USDJPY=X","GBPUSD=X","AUDUSD=X"]],
    )
    today           = date.today()
    one_year_ago    = today - timedelta(days=365)
    page.start_tf   = ft.TextField(label="Start (YYYY-MM-DD)", width=150, value=str(one_year_ago))
    page.end_tf     = ft.TextField(label="End   (YYYY-MM-DD)", width=150, value=str(today))
    fetch_btn       = ft.ElevatedButton("Fetch", on_click=lambda e: on_fetch(page))

    # Prediction-horizon input + Predict button
    page.horizon_tf = ft.TextField(label="Prediction Days", width=100, value="50")
    predict_btn     = ft.ElevatedButton("Predict", on_click=lambda e: on_predict(page))

    # Placeholder for the chart
    placeholder = (
        "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR4nGNg"
        "YAAAAAMAASsJTYQAAAAASUVORK5CYII="
    )
    page.img_chart = ft.Image(src_base64=placeholder, fit=ft.ImageFit.CONTAIN, height=400)

    # Table header
    page.header = ft.Row([
        ft.Text("Date",   width=100, weight="bold"),
        ft.Text("Open",   width=80,  weight="bold", text_align="right"),
        ft.Text("High",   width=80,  weight="bold", text_align="right"),
        ft.Text("Low",    width=80,  weight="bold", text_align="right"),
        ft.Text("Close",  width=80,  weight="bold", text_align="right"),
        ft.Text("Volume", width=100, weight="bold", text_align="right"),
    ], spacing=5)

    # Scrollable list for data rows
    page.list_view = ft.ListView(expand=True, spacing=2, height=200)

    # Layout (left-aligned)
    layout = ft.Column([
        ft.Row([page.pair_dd, page.start_tf, page.end_tf, fetch_btn], spacing=15),
        ft.Row([page.horizon_tf, predict_btn], spacing=10),
        ft.Row([page.img_chart], alignment=ft.MainAxisAlignment.START),
        ft.Divider(),
        page.header,
        page.list_view,
    ], expand=True, spacing=10)

    page.add(layout)


def on_fetch(page: ft.Page):
    pair, start, end = page.pair_dd.value, page.start_tf.value, page.end_tf.value

    # validate dates
    try:
        sd = datetime.strptime(start, "%Y-%m-%d").date()
        ed = datetime.strptime(end,   "%Y-%m-%d").date()
    except:
        page.snack_bar = ft.SnackBar(ft.Text("Please use YYYY-MM-DD format"))
        page.snack_bar.open = True
        page.update()
        return
    if sd > ed:
        page.snack_bar = ft.SnackBar(ft.Text("Start date must be on or before end date"))
        page.snack_bar.open = True
        page.update()
        return

    # fetch and display chart + table
    try:
        df = fetch_fx(pair, start, end)
    except Exception as err:
        page.snack_bar = ft.SnackBar(ft.Text(str(err)))
        page.snack_bar.open = True
        page.update()
        return

    page.img_chart.src_base64 = df_to_base64_plot(df, pair)

    # fill missing days with NaN
    full_idx   = pd.date_range(sd, ed, freq="D")
    df_full    = df.reindex(full_idx)
    dates      = [d.date().isoformat() for d in full_idx]
    open_vals  = df_full.iloc[:, 0]
    high_vals  = df_full.iloc[:, 1]
    low_vals   = df_full.iloc[:, 2]
    close_vals = df_full.iloc[:, 3]
    vol_idx    = 5 if df_full.shape[1] > 5 else df_full.shape[1] - 1
    vol_vals   = df_full.iloc[:, vol_idx]

    controls = []
    for i, d in enumerate(dates):
        def fmt(x, fmt_str="{:.4f}"):
            return "N/A" if pd.isna(x) else fmt_str.format(x)
        o = fmt(open_vals.iloc[i]); h = fmt(high_vals.iloc[i])
        l = fmt(low_vals.iloc[i]); c = fmt(close_vals.iloc[i])
        v = "N/A" if pd.isna(vol_vals.iloc[i]) else f"{int(vol_vals.iloc[i]):,}"
        controls.append(ft.Row([
            ft.Text(d,   width=100),
            ft.Text(o,   width=80,  text_align="right"),
            ft.Text(h,   width=80,  text_align="right"),
            ft.Text(l,   width=80,  text_align="right"),
            ft.Text(c,   width=80,  text_align="right"),
            ft.Text(v,   width=100, text_align="right"),
        ], spacing=5))

    page.list_view.controls = controls
    page.update()


def on_predict(page: ft.Page):
    # read and validate prediction horizon
    try:
        h = int(page.horizon_tf.value)
        assert h > 0
    except:
        page.snack_bar = ft.SnackBar(ft.Text("Prediction days must be a positive integer"))
        page.snack_bar.open = True
        page.update()
        return

    # print to terminal and call main.py
    print(f"[GUI] Passing prediction horizon to main.py: {h}")
    from main import main as cli_main
    cli_main(update_data=False, horizon=h)

    page.snack_bar = ft.SnackBar(ft.Text(f"Sent horizon={h} to the model. Check the terminal."))
    page.snack_bar.open = True
    page.update()


if __name__ == "__main__":
    ft.app(target=main, view=ft.WEB_BROWSER)

